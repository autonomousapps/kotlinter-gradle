plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
    id 'com.gradle.plugin-publish' version '0.10.0'
    id 'java-gradle-plugin'
    id 'maven-publish'
    // id 'org.jmailen.kotlinter' version '1.20.1'
    id 'idea'
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://maven.google.com' }
}

sourceSets {
    funcTest {
        kotlin.srcDir file('src/integTest/kotlin')
        resources.srcDir file('src/funcTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    implementation 'com.github.shyiko:ktlint:0.30.0'
    implementation 'me.cassiano:ktlint-html-reporter:0.2.0'
    implementation 'org.jetbrains.kotlin:kotlin-gradle-plugin'
    
    compileOnly 'com.android.tools.build:gradle:3.3.1'

    testImplementation 'junit:junit:4.12'
    testRuntime 'com.android.tools.build:gradle:3.3.1'

    funcTestImplementation 'junit:junit:4.12'
}

version = '1.21.0'
group = 'org.jmailen.gradle'
def pluginId = 'org.jmailen.kotlinter'

gradlePlugin {
    plugins {
        kotlinterPlugin {
            id = pluginId
            implementationClass = 'org.jmailen.gradle.kotlinter.KotlinterPlugin'
        }
    }

    testSourceSets sourceSets.funcTest
}

pluginBundle {
    website = 'https://github.com/jeremymailen/kotlinter-gradle'
    vcsUrl = 'https://github.com/jeremymailen/kotlinter-gradle'
    tags = ['kotlin', 'ktlint', 'lint', 'format', 'style', 'android']

    plugins {
        kotlinterPlugin {
            id = pluginId
            displayName = 'Kotlin Lint plugin'
            description = 'Lint and formatting for Kotlin using ktlint with configuration-free setup on JVM and Android projects'
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

wrapper {
    gradleVersion = '5.1.1'
}

def funcTest = tasks.register("funcTest", Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath
    mustRunAfter test
}

check.dependsOn funcTest